buildscript {
    ext {
        springBootVersion = '1.4.0.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'com.gradle.build-scan' version '1.0'
    id 'net.researchgate.release' version '2.4.0'
    id "com.coverity.ondemand" version "1.5.61"
    id "com.sourcemuse.mongo" version "0.13.0"
    id "org.asciidoctor.convert" version "1.5.3"
}

apply plugin: 'spring-boot'

jar {
    baseName = 'carminp-nosql-api'
    version = project.version

    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-data-mongodb'
    compile 'org.springframework.boot:spring-boot-starter-data-rest'
    compile 'org.springframework.boot:spring-boot-devtools'
    compile 'org.springframework.data:spring-data-mongodb'
    compile 'org.springframework.social:spring-social-facebook'
    compile 'com.google.guava:guava:19.0'
    compile 'net.sf.oval:oval:1.85'

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.springframework.restdocs:spring-restdocs-restassured:1.1.2.RELEASE'
}

def mongoRunning = false

ext {
    snippetsDir = file('build/generated-snippets')
}

test {
    forkEvery = 5
    maxParallelForks = Runtime.runtime.availableProcessors() / 2

    doFirst {
        startMongoDb.execute()
        mongoRunning = true
    }

    outputs.dir snippetsDir

    finalizedBy stopMongoDb
}

asciidoctor {
    attributes 'snippets': snippetsDir
    inputs.dir snippetsDir
    outputDir "build/asciidoc"

    dependsOn test
}

stopMongoDb{
    onlyIf {mongoRunning}
    doLast  {
        mongoRunning = false
    }
}

buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}

sourceSets {
    test {
        java {
            srcDirs 'src/test/java'
        }
    }
}

release {
    preTagCommitMessage = 'release(tag) - pre tag commit: '
    tagCommitMessage = 'release(tag) - creating tag: '
    newVersionCommitMessage = 'release(tag) - new version commit: '
    tagTemplate = '${version}'

    git {
        requireBranch = 'master'
        pushToRemote = 'origin'
    }
}

eclipse.classpath.file {
    beforeMerged { classpath ->
        classpath.entries.removeAll { entry -> entry.kind == 'lib' || entry.kind == 'var' }
    }
}

bootRun {
    systemProperties System.properties
}

mongo {
    port 12345
    logging 'console'
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.0'
}